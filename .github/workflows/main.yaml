name: Deploy to AWS

on:
  push:
    branches: [ "master" ] # This triggers the workflow whenever there is a push event to the master branch.

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: flightprice/demo_aws
  CONTAINER_NAME: flight_price_prediction # These environment variables are used throughout the workflow.

permissions:
  contents: read # Grants the workflow read permissions for repository contents.

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production # Defines the job to run on Ubuntu and be associated with the production environment.

    steps:
    - name: Checkout
      uses: actions/checkout@v4 # Clones the repository code.

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    